// Copyright (c) 2023 zoocityboy. All rights reserved.
// Autogenerated from Pigeon (v10.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package zoo.cityboy.appcenter.distribute

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/** Generated class from Pigeon that represents data sent in messages. */
data class ReleaseDetails (
  val id: Long,
  val version: Long,
  val size: Long,
  val shortVersion: String,
  val releaseNotes: String? = null,
  val releaseNotesUrl: String? = null,
  val minApiLevel: Long,
  val downloadUrl: String? = null,
  val isMandatoryUpdate: Boolean,
  val releaseHash: String,
  val distributionGroupId: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): ReleaseDetails {
      val id = list[0].let { if (it is Int) it.toLong() else it as Long }
      val version = list[1].let { if (it is Int) it.toLong() else it as Long }
      val size = list[2].let { if (it is Int) it.toLong() else it as Long }
      val shortVersion = list[3] as String
      val releaseNotes = list[4] as String?
      val releaseNotesUrl = list[5] as String?
      val minApiLevel = list[6].let { if (it is Int) it.toLong() else it as Long }
      val downloadUrl = list[7] as String?
      val isMandatoryUpdate = list[8] as Boolean
      val releaseHash = list[9] as String
      val distributionGroupId = list[10] as String
      return ReleaseDetails(id, version, size, shortVersion, releaseNotes, releaseNotesUrl, minApiLevel, downloadUrl, isMandatoryUpdate, releaseHash, distributionGroupId)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      id,
      version,
      size,
      shortVersion,
      releaseNotes,
      releaseNotesUrl,
      minApiLevel,
      downloadUrl,
      isMandatoryUpdate,
      releaseHash,
      distributionGroupId,
    )
  }
}

@Suppress("UNCHECKED_CAST")
private object DistributeApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ReleaseDetails.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is ReleaseDetails -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface DistributeApi {
  fun setDistributeEnabled(enabled: Boolean, callback: (Result<Unit>) -> Unit)
  fun notifyDistributeUpdateAction(updateAction: Long, callback: (Result<Unit>) -> Unit)
  fun handleDistributeUpdateAction(updateAction: Long, callback: (Result<Unit>) -> Unit)
  fun setDistributeDebugEnabled(enabled: Boolean, callback: (Result<Unit>) -> Unit)
  fun isDistributeEnabled(callback: (Result<Boolean>) -> Unit)
  fun disableAutomaticCheckForUpdate(callback: (Result<Unit>) -> Unit)
  fun checkForUpdates(callback: (Result<Unit>) -> Unit)
  fun ifExistsReleaseDetails(): ReleaseDetails?

  companion object {
    /** The codec used by DistributeApi. */
    val codec: MessageCodec<Any?> by lazy {
      DistributeApiCodec
    }
    /** Sets up an instance of `DistributeApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: DistributeApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.appcenter.DistributeApi.setDistributeEnabled", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val enabledArg = args[0] as Boolean
            api.setDistributeEnabled(enabledArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.appcenter.DistributeApi.notifyDistributeUpdateAction", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val updateActionArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            api.notifyDistributeUpdateAction(updateActionArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.appcenter.DistributeApi.handleDistributeUpdateAction", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val updateActionArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            api.handleDistributeUpdateAction(updateActionArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.appcenter.DistributeApi.setDistributeDebugEnabled", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val enabledArg = args[0] as Boolean
            api.setDistributeDebugEnabled(enabledArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.appcenter.DistributeApi.isDistributeEnabled", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.isDistributeEnabled() { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.appcenter.DistributeApi.disableAutomaticCheckForUpdate", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.disableAutomaticCheckForUpdate() { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.appcenter.DistributeApi.checkForUpdates", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.checkForUpdates() { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.appcenter.DistributeApi.ifExistsReleaseDetails", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.ifExistsReleaseDetails())
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
