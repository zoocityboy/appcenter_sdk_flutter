// Mocks generated by Mockito 5.4.2 from annotations
// in appcenter/test/app_center_distribute_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:appcenter/src/distribute.g.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [DistributeApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockDistributeApi extends _i1.Mock implements _i2.DistributeApi {
  MockDistributeApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> setDistributeEnabled(bool? arg_enabled) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDistributeEnabled,
          [arg_enabled],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> notifyDistributeUpdateAction(int? arg_updateAction) =>
      (super.noSuchMethod(
        Invocation.method(
          #notifyDistributeUpdateAction,
          [arg_updateAction],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> handleDistributeUpdateAction(int? arg_updateAction) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleDistributeUpdateAction,
          [arg_updateAction],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> setDistributeDebugEnabled(bool? arg_enabled) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDistributeDebugEnabled,
          [arg_enabled],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<bool> isDistributeEnabled() => (super.noSuchMethod(
        Invocation.method(
          #isDistributeEnabled,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
  @override
  _i3.Future<void> disableAutomaticCheckForUpdate() => (super.noSuchMethod(
        Invocation.method(
          #disableAutomaticCheckForUpdate,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> checkForUpdates() => (super.noSuchMethod(
        Invocation.method(
          #checkForUpdates,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<_i2.ReleaseDetails?> ifExistsReleaseDetails() =>
      (super.noSuchMethod(
        Invocation.method(
          #ifExistsReleaseDetails,
          [],
        ),
        returnValue: _i3.Future<_i2.ReleaseDetails?>.value(),
      ) as _i3.Future<_i2.ReleaseDetails?>);
}
