// Copyright (c) 2023 zoocityboy. All rights reserved.
// Autogenerated from Pigeon (v10.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol AppCenterApi {
  func start(secret: String, usePrivateTrack: Bool, completion: @escaping (Result<Void, Error>) -> Void)
  func setEnabled(enabled: Bool, completion: @escaping (Result<Void, Error>) -> Void)
  func isEnabled(completion: @escaping (Result<Bool, Error>) -> Void)
  func isConfigured() throws -> Bool
  func getInstallId(completion: @escaping (Result<String, Error>) -> Void)
  func isRunningInAppCenterTestCloud() throws -> Bool
  func setLogLevel(level: Int64, completion: @escaping (Result<Void, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class AppCenterApiSetup {
  /// The codec used by AppCenterApi.
  /// Sets up an instance of `AppCenterApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: AppCenterApi?) {
    let startChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.appcenter.AppCenterApi.start", binaryMessenger: binaryMessenger)
    if let api = api {
      startChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let secretArg = args[0] as! String
        let usePrivateTrackArg = args[1] as! Bool
        api.start(secret: secretArg, usePrivateTrack: usePrivateTrackArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      startChannel.setMessageHandler(nil)
    }
    let setEnabledChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.appcenter.AppCenterApi.setEnabled", binaryMessenger: binaryMessenger)
    if let api = api {
      setEnabledChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let enabledArg = args[0] as! Bool
        api.setEnabled(enabled: enabledArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      setEnabledChannel.setMessageHandler(nil)
    }
    let isEnabledChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.appcenter.AppCenterApi.isEnabled", binaryMessenger: binaryMessenger)
    if let api = api {
      isEnabledChannel.setMessageHandler { _, reply in
        api.isEnabled() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      isEnabledChannel.setMessageHandler(nil)
    }
    let isConfiguredChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.appcenter.AppCenterApi.isConfigured", binaryMessenger: binaryMessenger)
    if let api = api {
      isConfiguredChannel.setMessageHandler { _, reply in
        do {
          let result = try api.isConfigured()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      isConfiguredChannel.setMessageHandler(nil)
    }
    let getInstallIdChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.appcenter.AppCenterApi.getInstallId", binaryMessenger: binaryMessenger)
    if let api = api {
      getInstallIdChannel.setMessageHandler { _, reply in
        api.getInstallId() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getInstallIdChannel.setMessageHandler(nil)
    }
    let isRunningInAppCenterTestCloudChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.appcenter.AppCenterApi.isRunningInAppCenterTestCloud", binaryMessenger: binaryMessenger)
    if let api = api {
      isRunningInAppCenterTestCloudChannel.setMessageHandler { _, reply in
        do {
          let result = try api.isRunningInAppCenterTestCloud()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      isRunningInAppCenterTestCloudChannel.setMessageHandler(nil)
    }
    let setLogLevelChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.appcenter.AppCenterApi.setLogLevel", binaryMessenger: binaryMessenger)
    if let api = api {
      setLogLevelChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let levelArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        api.setLogLevel(level: levelArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      setLogLevelChannel.setMessageHandler(nil)
    }
  }
}
