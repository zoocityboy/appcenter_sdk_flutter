// Copyright (c) 2023 zoocityboy. All rights reserved.
// Autogenerated from Pigeon (v10.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol CrashesApi {
  func generateTestCrash() throws
  func hasReceivedMemoryWarningInLastSession(completion: @escaping (Result<Bool, Error>) -> Void)
  func hasCrashedInLastSession(completion: @escaping (Result<Bool, Error>) -> Void)
  func crashesSetEnabled(enabled: Bool, completion: @escaping (Result<Void, Error>) -> Void)
  func crashesIsEnabled(completion: @escaping (Result<Bool, Error>) -> Void)
  func trackException(message: String, type: String?, stackTrace: String?, properties: [String: String]?) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class CrashesApiSetup {
  /// The codec used by CrashesApi.
  /// Sets up an instance of `CrashesApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: CrashesApi?) {
    let generateTestCrashChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.appcenter_sdk.CrashesApi.generateTestCrash", binaryMessenger: binaryMessenger)
    if let api = api {
      generateTestCrashChannel.setMessageHandler { _, reply in
        do {
          try api.generateTestCrash()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      generateTestCrashChannel.setMessageHandler(nil)
    }
    let hasReceivedMemoryWarningInLastSessionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.appcenter_sdk.CrashesApi.hasReceivedMemoryWarningInLastSession", binaryMessenger: binaryMessenger)
    if let api = api {
      hasReceivedMemoryWarningInLastSessionChannel.setMessageHandler { _, reply in
        api.hasReceivedMemoryWarningInLastSession() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      hasReceivedMemoryWarningInLastSessionChannel.setMessageHandler(nil)
    }
    let hasCrashedInLastSessionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.appcenter_sdk.CrashesApi.hasCrashedInLastSession", binaryMessenger: binaryMessenger)
    if let api = api {
      hasCrashedInLastSessionChannel.setMessageHandler { _, reply in
        api.hasCrashedInLastSession() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      hasCrashedInLastSessionChannel.setMessageHandler(nil)
    }
    let crashesSetEnabledChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.appcenter_sdk.CrashesApi.crashesSetEnabled", binaryMessenger: binaryMessenger)
    if let api = api {
      crashesSetEnabledChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let enabledArg = args[0] as! Bool
        api.crashesSetEnabled(enabled: enabledArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      crashesSetEnabledChannel.setMessageHandler(nil)
    }
    let crashesIsEnabledChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.appcenter_sdk.CrashesApi.crashesIsEnabled", binaryMessenger: binaryMessenger)
    if let api = api {
      crashesIsEnabledChannel.setMessageHandler { _, reply in
        api.crashesIsEnabled() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      crashesIsEnabledChannel.setMessageHandler(nil)
    }
    let trackExceptionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.appcenter_sdk.CrashesApi.trackException", binaryMessenger: binaryMessenger)
    if let api = api {
      trackExceptionChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let messageArg = args[0] as! String
        let typeArg: String? = nilOrValue(args[1])
        let stackTraceArg: String? = nilOrValue(args[2])
        let propertiesArg: [String: String]? = nilOrValue(args[3])
        do {
          try api.trackException(message: messageArg, type: typeArg, stackTrace: stackTraceArg, properties: propertiesArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      trackExceptionChannel.setMessageHandler(nil)
    }
  }
}
